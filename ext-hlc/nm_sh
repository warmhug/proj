#!/usr/bin/env bash
# #!/bin/bash
# /bin/zsh

export PATH="/usr/local/bin:/usr/bin:$PATH"

current_path=$(/bin/pwd)
log_file="$current_path/z_log"
note_file="$current_path/z_note.md"
clash_file="$HOME/.config/clash/ss.yaml"

hl_input=""
hl_output='{"code": "200"}'

command_exists () {
  command -v "$1" >/dev/null 2>&1
}

datef() {
  local fmt="${1:-"%Y_%m_%d-%H_%M_%S"}"
  local output=$(date "+$fmt")
  echo "[$output __hl_log__nm__]"
  # date "+$fmt"
}

log_command() {
  local command="$1"
  echo -e "\n$(datef) === chrome-extension nm_sh log ===" >> "$log_file"
  echo "$(datef) 执行命令: $command" >> "$log_file"
  if eval "$command" 2>&1 | tee -a "$log_file"; then
    echo "$(datef) 执行完成" >> "$log_file"
  else
    echo "$(datef) 执行失败" >> "$log_file"
  fi
  # 添加空白
  printf '\n%.0s' {1..2} >> $log_file
}
# log_command "ls -l"
# log_command "echo Hello, World!"
# log_command "echo 'Hello'"

run_osascript() {
  # osascript -e 'activate app "Safari"'
  if [[ "$1" == "addRule" ]]; then
    # osascript "./nm_ss.scpt"
    osascript -e 'tell application "System Events" to tell process "ClashX"
      tell menu bar item 1 of menu bar 2
        click
        key code 15 using command down
      end tell
    end tell
    '
  elif [[ "$1" == "topmost" ]]; then
    while true; do
      log_command echo "$1: test while"
    sleep 1
    done
  else
    log_command "echo 'arg is wrong'"
  fi
  # log_command "echo 'run_osascript_success'"
}

dealMsg() {
  hl_input=${hl_input/#*'{'/'{'}
  # hl_input=${hl_input%'"}'}
  if ! command_exists yq; then
    # echo "yq 命令不存在" >> $log_file
    log_command "echo 'yq 命令不存在, 请运行 brew install yq'"
    return
  fi
  local msg_command=$(echo "$hl_input" | yq '.message')
  local msg_content=$(echo "$hl_input" | yq '.content')
  # echo $msg_command >> $log_file
  if [[ "$msg_command" != "setNote" ]]; then
    log_command "echo '$msg_command'"
  fi

  # 使用 2>&1 将标准错误输出到文件里
  # result=$(w2 "status" 2>&1)
  # echo "Received message: $result" | tee -a $log_file
  # w2 status >> $log_file
  # ls >> $log_file
  # echo `which echo` >> $log_file

  # 注意，如果 echo 的内容不被处理、会导致 Error when communicating with the native messaging host.
  # https://stackoverflow.com/a/51551525/2190503

  if [[ "$msg_command" == "top" ]]; then
    open -a "Google Chrome" "http://localhost:7681/?disableLeaveAlert=true&arg=/Users/hua/.zshrc&arg=top"
    log_command "echo '进程信息:' && ps -ef | grep ttyd"
  elif [[ "$msg_command" == "top-kill" ]]; then
    clipboard_content=$(pbpaste)
    log_command "kill $clipboard_content"
  elif [[ "$msg_command" == "setNote" ]]; then
    echo "$msg_content" > $note_file
  elif [[ "$msg_command" == "getNote" ]]; then
    note_cont=$(cat $note_file)
    hl_output='{"code": "200", "content": '$note_cont'}'
  elif [[ "$msg_command" == "addRule" ]]; then
    if [[ $msg_content =~ ^www\. ]]; then
      msg_content=${msg_content#www.}
    fi
    new_str=DOMAIN-SUFFIX,"${msg_content}",Proxy
    rules_value=$(yq '.rules' $clash_file)
    if [[ "$rules_value" != *$new_str* ]]; then
      echo $new_str >> $log_file
      yq e '.rules |= [ "'"$new_str"'" ] +.' $clash_file -i
      run_osascript "addRule"
    fi
  elif [[ "$msg_command" == "topmost" ]]; then
    # run_osascript "addRule"
    run_osascript "topmost"
  elif [[ "$msg_command" == "clash" ]]; then
  # bypassdomains 和 clash rule 哪个优先？
  local bypassdomains="127.0.0.1,localhost,gateway.icloud.com,gateway.icloud.com.cn,\
  10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,172.16.0.0/12,192.168.0.0/16,*.local,\
  timestamp.apple.com,sequoia.apple.com,seed-sequoia.siri.apple.com"
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxy Wi-Fi 127.0.0.1 7890
  networksetup -setsecurewebproxy Wi-Fi 127.0.0.1 7890
  networksetup -setsocksfirewallproxy Wi-Fi 127.0.0.1 7890
  networksetup -setproxybypassdomains Wi-Fi "$bypassdomains"
  # networksetup -setproxybypassdomains Wi-Fi *.local 169.254/16 baidu.com
  networksetup -setwebproxystate Wi-Fi on
  networksetup -setsecurewebproxystate Wi-Fi on
  networksetup -setsocksfirewallproxystate Wi-Fi on
  elif [[ "$msg_command" == "comp" ]]; then
  networksetup -setproxyautodiscovery Wi-Fi on
  networksetup -setwebproxystate Wi-Fi off
  networksetup -setsecurewebproxystate Wi-Fi off
  networksetup -setsocksfirewallproxystate Wi-Fi off
  elif [[ "$msg_command" == "whistle" ]]; then
  # sleep 5
  log_command "w2 restart"
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxy Wi-Fi 127.0.0.1 8899
  networksetup -setsecurewebproxy Wi-Fi 127.0.0.1 8899
  networksetup -setsocksfirewallproxy Wi-Fi Empty
  networksetup -setwebproxystate Wi-Fi on
  networksetup -setsecurewebproxystate Wi-Fi on
  networksetup -setsocksfirewallproxystate Wi-Fi off
  networksetup -setproxybypassdomains Wi-Fi Empty
  elif [[ "$msg_command" == "no" ]]; then
  networksetup -setproxyautodiscovery Wi-Fi off
  networksetup -setwebproxystate Wi-Fi off
  networksetup -setsecurewebproxystate Wi-Fi off
  networksetup -setsocksfirewallproxystate Wi-Fi off
  elif [[ "$msg_command" == "openMacConfig" ]]; then
  open "x-apple.systempreferences:com.apple.Network-Settings.extension?Proxies"
  elif [[ "$msg_command" == "nativeCmd" ]]; then
  log_command "$msg_content"
  fi
  echo $hl_output
}

# 来自 https://stackoverflow.com/a/24777120/2190503
# Loop forever, to deal with chrome.runtime.connectNative
while IFS= read -r -n1 c; do
    # Read the first message
    # Assuming that the message ALWAYS ends with a },
    # with no }s in the string. Adopt this piece of code if needed.
    hl_input="$hl_input$c"
    if [ "$c" != '}' ] ; then
        continue
    fi

    dealMsg

    # Calculate the byte size of the string.
    # NOTE: This assumes that byte length is identical to the string length!
    # Do not use multibyte (unicode) characters, escape them instead, e.g.
    # message='"Some unicode character:\u1234"'
    messagelen=${#hl_output}

    # Convert to an integer in native byte order.
    # If you see an error message in Chrome's stdout with
    # "Native Messaging host tried sending a message that is ... bytes long.",
    # then just swap the order, i.e. messagelen1 <-> messagelen4 and
    # messagelen2 <-> messagelen3
    messagelen1=$(( ($messagelen      ) & 0xFF ))
    messagelen2=$(( ($messagelen >>  8) & 0xFF ))
    messagelen3=$(( ($messagelen >> 16) & 0xFF ))
    messagelen4=$(( ($messagelen >> 24) & 0xFF ))

    # Print the message byte length followed by the actual message.
    printf "$(printf '\\x%x\\x%x\\x%x\\x%x' \
        $messagelen1 $messagelen2 $messagelen3 $messagelen4)%s" "$hl_output"
done
